import gradio as gr
import os
from dotenv import load_dotenv
from rag_starter_gemini import RAGBot
from datetime import datetime

# Load environment variables
load_dotenv()

# Initialize the bot
api_key = os.getenv('GOOGLE_API_KEY')
bot = RAGBot(api_key)

def format_feedback(feedback_dict):
    required_keys = ['timestamp', 'question', 'answer', 'rating', 'comment']
    for key in required_keys:
        if key not in feedback_dict:
            return "Feedback is incomplete."
    return f"""
    üïí {feedback_dict['timestamp']}
    üë§ –ê—Å—É—É–ª—Ç: {feedback_dict['question']}
    ü§ñ –•–∞—Ä–∏—É–ª—Ç: {feedback_dict['answer']}
    ‚≠ê “Æ–Ω—ç–ª–≥—ç—ç: {feedback_dict['rating']}
    üí¨ –°–∞–Ω–∞–ª: {feedback_dict['comment']}
    """


class ChatUI:
    def __init__(self):
        self.feedback_history = []
    
    def respond(self, message, history):
        """Get response from RAG bot"""
        return bot.ask(message)
    
    def save_feedback(self, rating, comment, question, answer):
        """Save user feedback"""
        feedback = {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "question": question,
            "answer": answer,
            "rating": rating,
            "comment": comment
        }
        self.feedback_history.append(feedback)
        return format_feedback(feedback)

    def create_interface(self):
        """Create Gradio interface"""
        css = """
        .contain { display: flex; flex-direction: column; }
        #component-0 { height: 100%; }
        .gradio-container { height: 800px !important; }
        """
        
        with gr.Blocks(css=css) as demo:
            # Header section
            gr.Markdown(
                """
                # üè¶ –•–∞—Å –ë–∞–Ω–∫ –î–∏–∂–∏—Ç–∞–ª –¢—É—Å–ª–∞—Ö
                
                –°–∞–π–Ω –±–∞–π–Ω–∞ —É—É? –ë–∏ –•–∞—Å –ë–∞–Ω–∫–Ω—ã –¥–∏–∂–∏—Ç–∞–ª —Ç—É—Å–ª–∞—Ö **"–•–∞—Å"** –±–∞–π–Ω–∞.
                """,
                elem_classes="custom-markdown"
            )

            # Chat interface
            chatbot = gr.ChatInterface(
                self.respond,
                examples=[
                    "–ë—ç–ª—Ç–≥—ç–Ω –Ω–∏–π–ª“Ø“Ø–ª—ç–≥—á–∏–π–Ω –∑—ç—ç–ª–∏–π–Ω –¥–∞–≤—É—É —Ç–∞–ª —é—É –≤—ç?",
                    "“Æ–Ω–¥—Å—ç–Ω —Ö”©—Ä”©–Ω–≥–∏–π–Ω –∑—ç—ç–ª–∏–π–Ω —Ö—É–≥–∞—Ü–∞–∞ —Ö—ç–¥ –≤—ç?",
                    "–ú–æ–Ω–ø—ç–π –∫–∞—Ä—Ç—ã–Ω –∂–∏–ª–∏–π–Ω —Ö—É—Ä–∞–∞–º–∂ —Ö—ç–¥ –≤—ç?",
                    "–ñ–î–ë —ç—Ä—Ö–ª—ç–≥—á–¥—ç–¥ —è–º–∞—Ä –∑—ç—ç–ª –æ–ª–≥–æ–¥–æ–≥ –≤—ç?",
                    "–ë–∏–∑–Ω–µ—Å —ç—Ä—Ö–ª—ç–≥—á–¥—ç–¥ –∑–æ—Ä–∏—É–ª—Å–∞–Ω —Å—É—Ä–≥–∞–ª—Ç –±–∞–π–¥–∞–≥ —É—É?",
                    "“Æ–Ω–¥—Å—ç–Ω —Ö”©—Ä”©–Ω–≥–∏–π–Ω –∑—ç—ç–ª–∏–π–Ω —Ö“Ø“Ø —Ö—ç–¥ –≤—ç?",
                    "–•–∞—Å –ë–∞–Ω–∫ —Ö—ç–∑—ç—ç “Ø“Ø—Å—Å—ç–Ω –±—ç?",
                    "–•–∞—Å –ë–∞–Ω–∫ —Ö—ç–¥—ç–Ω —Å–∞–ª–±–∞—Ä—Ç–∞–π –≤—ç?",
                    "–¢”©–≤ —Å–∞–ª–±–∞—Ä",
                    "–ó–∞—Ö–∏–∞–ª–≥–∞—Ç –≥“Ø–π–ª–≥—ç—ç –≥—ç–∂ —é—É –≤—ç?",
                    "–†—ç–¥–ü–æ–π–Ω—Ç –æ–Ω–æ–æ —Ö—ç—Ä—Ö—ç–Ω —Ü—É–≥–ª—É—É–ª–∞—Ö –≤—ç?",
                    "–≠–∫–æ —Ö—ç—Ä—ç–≥–ª—ç—ç–Ω–∏–π –∑—ç—ç–ª–∏–π–Ω –Ω”©—Ö—Ü”©–ª —è–º–∞—Ä –±–∞–π–¥–∞–≥ –≤—ç?"
                ],
                title="",
                description="",
                fill_height=True,
                autofocus=True,
                autoscroll=True
            )

            # Feedback section
            with gr.Accordion("üí¨ –°–∞–Ω–∞–ª —Ö“Ø—Å—ç–ª—Ç", open=False):
                with gr.Row():
                    rating = gr.Slider(
                        minimum=1, 
                        maximum=5, 
                        value=5, 
                        step=1, 
                        label="“Æ–Ω—ç–ª–≥—ç—ç"
                    )
                    comment = gr.Textbox(
                        label="–°–∞–Ω–∞–ª", 
                        placeholder="–¢–∞–Ω—ã —Å–∞–Ω–∞–ª –±–∏–¥—ç–Ω–¥ —á—É—Ö–∞–ª...",
                        lines=2
                    )
                
                feedback_btn = gr.Button("–ò–ª–≥—ç—ç—Ö", variant="primary")
                feedback_output = gr.Markdown()

                def submit_feedback():
                    if len(chatbot.chat_history) > 0:
                        last_interaction = chatbot.chat_history[-1]
                        return self.save_feedback(
                            rating.value,
                            comment.value,
                            last_interaction[0],
                            last_interaction[1]
                        )
                    return "–ß–∞—Ç —Ç“Ø“Ø—Ö —Ö–æ–æ—Å–æ–Ω –±–∞–π–Ω–∞."

                feedback_btn.click(
                    submit_feedback,
                    inputs=[rating, comment],
                    outputs=[feedback_output]
                )

            # Help section
            with gr.Accordion("‚ùì –¢—É—Å–ª–∞–º–∂", open=False):
                gr.Markdown(
                    """
                    ## –•—ç—Ä—Ö—ç–Ω –∞—à–∏–≥–ª–∞—Ö –≤—ç?
                    1. –ê—Å—É—É–ª—Ç–∞–∞ –±–∏—á—ç—ç–¥ Enter —Ç–æ–≤—á –¥–∞—Ä–Ω–∞
                    2. –ñ–∏—à—ç—ç –∞—Å—É—É–ª—Ç—É—É–¥–∞–∞—Å —Å–æ–Ω–≥–æ–∂ –±–æ–ª–Ω–æ
                    3. –ß–∞—Ç—ã–Ω —Ç“Ø“Ø—Ö–∏–π–≥ —Ü—ç–≤—ç—Ä–ª—ç—Ö –±–æ–ª üóëÔ∏è —Ç–æ–≤—á–∏–π–≥ –¥–∞—Ä–Ω–∞
                    4. –°“Ø“Ø–ª–∏–π–Ω —Ö–∞—Ä–∏—É–ª—Ç—ã–≥ –∑–∞—Å–∞—Ö –±–æ–ª ‚Ü©Ô∏è —Ç–æ–≤—á–∏–π–≥ –¥–∞—Ä–Ω–∞
                    
                    ## ‚ö†Ô∏è –ê–Ω—Ö–∞–∞—Ä–∞—Ö –∑“Ø–π–ª—Å
                    * –ê—Å—É—É–ª—Ç–∞–∞ —Ç–æ–¥–æ—Ä—Ö–æ–π, –æ–π–ª–≥–æ–º–∂—Ç–æ–π –±–∏—á–Ω—ç “Ø“Ø
                    * –ù—ç–≥ —É–¥–∞–∞–¥ –Ω—ç–≥ –∞—Å—É—É–ª—Ç –∞—Å—É—É–Ω–∞ —É—É
                    * –•—É–≤–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª –æ—Ä—É—É–ª–∞—Ö–≥“Ø–π –±–∞–π–Ω–∞ —É—É
                    """
                )

        return demo

def main():
    ui = ChatUI()
    demo = ui.create_interface()
    demo.launch(share=True)

if __name__ == "__main__":
    main() 